{
    "name": "AlgoHealx",
    "structs": {},
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "owner_addr"
                },
                {
                    "type": "address",
                    "name": "government_addr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_manufacturer",
            "args": [
                {
                    "type": "address",
                    "name": "manufacturer_addr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register_batch",
            "args": [
                {
                    "type": "string",
                    "name": "batch_details"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_batch_details",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3duZXI="
                },
                "government_address": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z292ZXJubWVudF9hZGRyZXNz"
                },
                "batch_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmF0Y2hfY291bnQ="
                },
                "manufacturer_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWFudWZhY3R1cmVyX2NvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "manufacturers": {
                    "keyType": "uint64",
                    "valueType": "address",
                    "prefix": "bWFudV8="
                },
                "batches": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": "YmF0Y2hf"
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "Batch limit reached"
                },
                {
                    "pc": [
                        349
                    ],
                    "errorMessage": "Invalid index"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "Not whitelisted"
                },
                {
                    "pc": [
                        72
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        195
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        187
                    ],
                    "errorMessage": "Whitelist full"
                },
                {
                    "pc": [
                        295,
                        345
                    ],
                    "errorMessage": "check self.batch_count exists"
                },
                {
                    "pc": [
                        182,
                        232
                    ],
                    "errorMessage": "check self.manufacturer_count exists"
                },
                {
                    "pc": [
                        193
                    ],
                    "errorMessage": "check self.owner exists"
                },
                {
                    "pc": [
                        224
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        340
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        128,
                        136,
                        178
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyADAAEgJgULYmF0Y2hfY291bnQSbWFudWZhY3R1cmVyX2NvdW50BW93bmVyBW1hbnVfBmJhdGNoXzEYQAAGKCJnKSJnMRkURDEYQQAdggMEO46smQSL1LltBMmWQsw2GgCOAwBBAGkA4gCABLsXcyA2GgCOAQABADYaAUkVJBJENhoCSRUkEkQqTwJngBJnb3Zlcm5tZW50X2FkZHJlc3NMZygiZykiZyNDNhoBSRUkEkQiKWVESYEyDEQxACIqZUQSREkWK0xQTwK/IwgpTGcjQzYaAUkiWYECCEsBFRJEVwIAIiIpZURLAQ1BAFlJFitMUL6AILMOXhVparGgvKr+H16gfnZ+uow6D72Z3IBi16bflk5iTgJNMQASQQAgIyMSRCIoZURJgWQMREkWJwRMUEm8SEsDvyMIKExnI0NJIwhFAUL/nSJC/9U2GgFJFYEIEkQXIihlREsBDUQWJwRMUL6AAE4CTUkVFlcGAkxQgAQVH3x1TFCwI0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}