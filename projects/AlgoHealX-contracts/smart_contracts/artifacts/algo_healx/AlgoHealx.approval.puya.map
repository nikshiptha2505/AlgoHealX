{
  "version": 3,
  "sources": [
    "../../algo_healx/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBQ;AAAmB;AAAnB;AACA;AAA0B;AAA1B;AAZR;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAcK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AAAmB;AAAnB;AACA;AAA0B;AAA1B;AALH;AAAA;AAOA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;AAAA;AAA0B;;AAA1B;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAEmB;AAAA;AAAnB;AAAA;AAAA;AAAA;;AAAA;AACoD;AAA1B;AAA1B;AAAA;AAAA;AANH;AAAA;AAQA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAUe;AACF;AAAA;AAAA;AAAA;AAAJ;;AAAA;AAAd;;;AAIuC;AAAA;AAAvB;AAAA;AAAA;AAAA;AAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAlC;;AAAA;AACD;;AAAA;AAAf;;;AACuB;AAf0B;AAAlC;AAAP;AACc;AAAA;AAAA;AAAA;AACP;AAAM;;AAAN;AAAP;AACa;AAAA;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACsC;AAAnB;AAAnB;AAAA;AAAA;AANH;AAAA;AAkBW;AAAI;AAAJ;AAAA;;;;;AACD;AAjBA;;;AAkBV;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEsB;AAAA;AAAA;AAAA;AAAR;;AAAA;AAAP;AACwB;AAAjB;;AAAA;AAAA;AAAA;AAAgC;;AAAhC;;AAAA;AAHd;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32"
    },
    "6": {
      "op": "bytecblock \"batch_count\" \"manufacturer_count\" \"owner\" 0x6d616e755f 0x62617463685f"
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "63": {
      "op": "bytec_0 // \"batch_count\"",
      "defined_out": [
        "\"batch_count\""
      ],
      "stack_out": [
        "\"batch_count\""
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"batch_count\"",
        "0"
      ],
      "stack_out": [
        "\"batch_count\"",
        "0"
      ]
    },
    "65": {
      "op": "app_global_put",
      "stack_out": []
    },
    "66": {
      "op": "bytec_1 // \"manufacturer_count\"",
      "defined_out": [
        "\"manufacturer_count\""
      ],
      "stack_out": [
        "\"manufacturer_count\""
      ]
    },
    "67": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"manufacturer_count\"",
        "0"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": []
    },
    "69": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "71": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "72": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "75": {
      "op": "bz main_create_NoOp@9",
      "stack_out": []
    },
    "78": {
      "op": "pushbytess 0x3b8eac99 0x8bd4b96d 0xc99642cc // method \"add_manufacturer(address)void\", method \"register_batch(string)void\", method \"get_batch_details(uint64)string\"",
      "defined_out": [
        "Method(add_manufacturer(address)void)",
        "Method(get_batch_details(uint64)string)",
        "Method(register_batch(string)void)"
      ],
      "stack_out": [
        "Method(add_manufacturer(address)void)",
        "Method(register_batch(string)void)",
        "Method(get_batch_details(uint64)string)"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_manufacturer(address)void)",
        "Method(get_batch_details(uint64)string)",
        "Method(register_batch(string)void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(add_manufacturer(address)void)",
        "Method(register_batch(string)void)",
        "Method(get_batch_details(uint64)string)",
        "tmp%4#0"
      ]
    },
    "98": {
      "op": "match add_manufacturer register_batch get_batch_details",
      "stack_out": []
    },
    "106": {
      "op": "err"
    },
    "107": {
      "block": "main_create_NoOp@9",
      "stack_in": [],
      "op": "pushbytes 0xbb177320 // method \"create_application(address,address)void\"",
      "defined_out": [
        "Method(create_application(address,address)void)"
      ],
      "stack_out": [
        "Method(create_application(address,address)void)"
      ]
    },
    "113": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_application(address,address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(create_application(address,address)void)",
        "tmp%5#0"
      ]
    },
    "116": {
      "op": "match create_application",
      "stack_out": []
    },
    "120": {
      "op": "err"
    },
    "121": {
      "subroutine": "smart_contracts.algo_healx.contract.AlgoHealx.create_application[routing]",
      "params": {},
      "block": "create_application",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0"
      ]
    },
    "124": {
      "op": "dup",
      "defined_out": [
        "owner_addr#0",
        "owner_addr#0 (copy)"
      ],
      "stack_out": [
        "owner_addr#0",
        "owner_addr#0 (copy)"
      ]
    },
    "125": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "len%0#0"
      ]
    },
    "126": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "len%0#0",
        "32"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "eq%0#0"
      ]
    },
    "128": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "owner_addr#0"
      ]
    },
    "129": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "government_addr#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "government_addr#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "government_addr#0",
        "government_addr#0 (copy)",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "government_addr#0",
        "government_addr#0 (copy)"
      ]
    },
    "133": {
      "op": "len",
      "defined_out": [
        "government_addr#0",
        "len%1#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "government_addr#0",
        "len%1#0"
      ]
    },
    "134": {
      "op": "intc_2 // 32",
      "stack_out": [
        "owner_addr#0",
        "government_addr#0",
        "len%1#0",
        "32"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "government_addr#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "government_addr#0",
        "eq%1#0"
      ]
    },
    "136": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "owner_addr#0",
        "government_addr#0"
      ]
    },
    "137": {
      "op": "bytec_2 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "government_addr#0",
        "owner_addr#0"
      ],
      "stack_out": [
        "owner_addr#0",
        "government_addr#0",
        "\"owner\""
      ]
    },
    "138": {
      "op": "uncover 2",
      "stack_out": [
        "government_addr#0",
        "\"owner\"",
        "owner_addr#0"
      ]
    },
    "140": {
      "op": "app_global_put",
      "stack_out": [
        "government_addr#0"
      ]
    },
    "141": {
      "op": "pushbytes \"government_address\"",
      "defined_out": [
        "\"government_address\"",
        "government_addr#0"
      ],
      "stack_out": [
        "government_addr#0",
        "\"government_address\""
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "\"government_address\"",
        "government_addr#0"
      ]
    },
    "162": {
      "op": "app_global_put",
      "stack_out": []
    },
    "163": {
      "op": "bytec_0 // \"batch_count\"",
      "defined_out": [
        "\"batch_count\""
      ],
      "stack_out": [
        "\"batch_count\""
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"batch_count\"",
        "0"
      ],
      "stack_out": [
        "\"batch_count\"",
        "0"
      ]
    },
    "165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "166": {
      "op": "bytec_1 // \"manufacturer_count\"",
      "defined_out": [
        "\"manufacturer_count\""
      ],
      "stack_out": [
        "\"manufacturer_count\""
      ]
    },
    "167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"manufacturer_count\"",
        "0"
      ]
    },
    "168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "169": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "subroutine": "smart_contracts.algo_healx.contract.AlgoHealx.add_manufacturer[routing]",
      "params": {},
      "block": "add_manufacturer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0"
      ]
    },
    "174": {
      "op": "dup",
      "defined_out": [
        "manufacturer_addr#0",
        "manufacturer_addr#0 (copy)"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "manufacturer_addr#0 (copy)"
      ]
    },
    "175": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "len%0#0"
      ]
    },
    "176": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "len%0#0",
        "32"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "eq%0#0"
      ]
    },
    "178": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "manufacturer_addr#0"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "0"
      ]
    },
    "180": {
      "op": "bytec_1 // \"manufacturer_count\"",
      "defined_out": [
        "\"manufacturer_count\"",
        "0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "0",
        "\"manufacturer_count\""
      ]
    },
    "181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "idx#0",
        "manufacturer_addr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "maybe_exists%0#0"
      ]
    },
    "182": {
      "error": "check self.manufacturer_count exists",
      "op": "assert // check self.manufacturer_count exists",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0"
      ]
    },
    "183": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "184": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "idx#0",
        "idx#0 (copy)",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "idx#0 (copy)",
        "50"
      ]
    },
    "186": {
      "op": "<",
      "defined_out": [
        "idx#0",
        "manufacturer_addr#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "187": {
      "error": "Whitelist full",
      "op": "assert // Whitelist full",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0"
      ]
    },
    "188": {
      "op": "txn Sender",
      "defined_out": [
        "idx#0",
        "manufacturer_addr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%1#1"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%1#1",
        "0"
      ]
    },
    "191": {
      "op": "bytec_2 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "idx#0",
        "manufacturer_addr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%1#1",
        "0",
        "\"owner\""
      ]
    },
    "192": {
      "op": "app_global_get_ex",
      "defined_out": [
        "idx#0",
        "manufacturer_addr#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%1#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "193": {
      "error": "check self.owner exists",
      "op": "assert // check self.owner exists",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%1#1",
        "maybe_value%1#0"
      ]
    },
    "194": {
      "op": "==",
      "defined_out": [
        "idx#0",
        "manufacturer_addr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "tmp%2#0"
      ]
    },
    "195": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0"
      ]
    },
    "196": {
      "op": "dup",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "encoded_value%0#0"
      ]
    },
    "198": {
      "op": "bytec_3 // 0x6d616e755f",
      "defined_out": [
        "0x6d616e755f",
        "encoded_value%0#0",
        "idx#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "encoded_value%0#0",
        "0x6d616e755f"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "0x6d616e755f",
        "encoded_value%0#0"
      ]
    },
    "200": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "idx#0",
        "manufacturer_addr#0"
      ],
      "stack_out": [
        "manufacturer_addr#0",
        "idx#0",
        "box_prefixed_key%0#0"
      ]
    },
    "201": {
      "op": "uncover 2",
      "stack_out": [
        "idx#0",
        "box_prefixed_key%0#0",
        "manufacturer_addr#0"
      ]
    },
    "203": {
      "op": "box_put",
      "stack_out": [
        "idx#0"
      ]
    },
    "204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "1"
      ]
    },
    "205": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "206": {
      "op": "bytec_1 // \"manufacturer_count\"",
      "stack_out": [
        "tmp%3#0",
        "\"manufacturer_count\""
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "\"manufacturer_count\"",
        "tmp%3#0"
      ]
    },
    "208": {
      "op": "app_global_put",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "subroutine": "smart_contracts.algo_healx.contract.AlgoHealx.register_batch[routing]",
      "params": {},
      "block": "register_batch",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "215": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "216": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "217": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "219": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "220": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "222": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "224": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "extract 2 0",
      "defined_out": [
        "batch_details#0"
      ],
      "stack_out": [
        "batch_details#0"
      ]
    },
    "228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "batch_details#0",
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "229": {
      "block": "register_batch_while_top@2",
      "stack_in": [
        "batch_details#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "0"
      ]
    },
    "230": {
      "op": "bytec_1 // \"manufacturer_count\"",
      "defined_out": [
        "\"manufacturer_count\"",
        "0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "0",
        "\"manufacturer_count\""
      ]
    },
    "231": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "232": {
      "error": "check self.manufacturer_count exists",
      "op": "assert // check self.manufacturer_count exists",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "233": {
      "op": "dig 1",
      "defined_out": [
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "235": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%0#2"
      ]
    },
    "236": {
      "op": "bz register_batch_after_while@6",
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "239": {
      "op": "dup",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "i#0"
      ]
    },
    "240": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "241": {
      "op": "bytec_3 // 0x6d616e755f",
      "defined_out": [
        "0x6d616e755f",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "encoded_value%0#0",
        "0x6d616e755f"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "0x6d616e755f",
        "encoded_value%0#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "244": {
      "op": "box_get",
      "defined_out": [
        "i#0",
        "maybe_exists%1#1",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "245": {
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "i#0",
        "maybe_exists%1#1",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "maybe_value%1#1",
        "maybe_exists%1#1",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "279": {
      "op": "cover 2",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "maybe_value%1#1",
        "maybe_exists%1#1"
      ]
    },
    "281": {
      "op": "select",
      "defined_out": [
        "i#0",
        "m#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "m#0"
      ]
    },
    "282": {
      "op": "txn Sender",
      "defined_out": [
        "i#0",
        "m#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "m#0",
        "tmp%1#2"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "285": {
      "op": "bz register_batch_after_if_else@5",
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "289": {
      "block": "register_batch_after_inlined_smart_contracts.algo_healx.contract.AlgoHealx._is_sender_manufacturer@7",
      "stack_in": [
        "batch_details#0",
        "i#0",
        "tmp%0#1"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%0#1",
        "1"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "291": {
      "error": "Not whitelisted",
      "op": "assert // Not whitelisted",
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "292": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "0"
      ]
    },
    "293": {
      "op": "bytec_0 // \"batch_count\"",
      "defined_out": [
        "\"batch_count\"",
        "0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "0",
        "\"batch_count\""
      ]
    },
    "294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "idx#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "maybe_exists%0#0"
      ]
    },
    "295": {
      "error": "check self.batch_count exists",
      "op": "assert // check self.batch_count exists",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0"
      ]
    },
    "296": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "297": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "idx#0 (copy)",
        "100"
      ]
    },
    "299": {
      "op": "<",
      "defined_out": [
        "idx#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "tmp%2#0"
      ]
    },
    "300": {
      "error": "Batch limit reached",
      "op": "assert // Batch limit reached",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0"
      ]
    },
    "301": {
      "op": "dup",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "302": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "idx#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "encoded_value%0#0"
      ]
    },
    "303": {
      "op": "bytec 4 // 0x62617463685f",
      "defined_out": [
        "0x62617463685f",
        "encoded_value%0#0",
        "idx#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "encoded_value%0#0",
        "0x62617463685f"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "0x62617463685f",
        "encoded_value%0#0"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "idx#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "box_prefixed_key%0#0"
      ]
    },
    "307": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "idx#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "308": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "idx#0",
        "{box_del}"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "309": {
      "op": "pop",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "box_prefixed_key%0#0"
      ]
    },
    "310": {
      "op": "dig 3",
      "defined_out": [
        "batch_details#0",
        "box_prefixed_key%0#0",
        "idx#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "box_prefixed_key%0#0",
        "batch_details#0"
      ]
    },
    "312": {
      "op": "box_put",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0"
      ]
    },
    "313": {
      "op": "intc_1 // 1",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "idx#0",
        "1"
      ]
    },
    "314": {
      "op": "+",
      "defined_out": [
        "batch_details#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "315": {
      "op": "bytec_0 // \"batch_count\"",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%3#0",
        "\"batch_count\""
      ]
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "\"batch_count\"",
        "tmp%3#0"
      ]
    },
    "317": {
      "op": "app_global_put",
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "318": {
      "op": "intc_1 // 1",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "1"
      ]
    },
    "319": {
      "op": "return",
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "320": {
      "block": "register_batch_after_if_else@5",
      "stack_in": [
        "batch_details#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "i#0"
      ]
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "322": {
      "op": "+",
      "stack_out": [
        "batch_details#0",
        "i#0",
        "i#0"
      ]
    },
    "323": {
      "op": "bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0"
      ]
    },
    "325": {
      "op": "b register_batch_while_top@2"
    },
    "328": {
      "block": "register_batch_after_while@6",
      "stack_in": [
        "batch_details#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "batch_details#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "329": {
      "op": "b register_batch_after_inlined_smart_contracts.algo_healx.contract.AlgoHealx._is_sender_manufacturer@7"
    },
    "332": {
      "subroutine": "smart_contracts.algo_healx.contract.AlgoHealx.get_batch_details[routing]",
      "params": {},
      "block": "get_batch_details",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "336": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "337": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "339": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "340": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "342": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "0"
      ]
    },
    "343": {
      "op": "bytec_0 // \"batch_count\"",
      "defined_out": [
        "\"batch_count\"",
        "0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "0",
        "\"batch_count\""
      ]
    },
    "344": {
      "op": "app_global_get_ex",
      "defined_out": [
        "index#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "index#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "345": {
      "error": "check self.batch_count exists",
      "op": "assert // check self.batch_count exists",
      "stack_out": [
        "index#0",
        "maybe_value%0#0"
      ]
    },
    "346": {
      "op": "dig 1",
      "defined_out": [
        "index#0",
        "index#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "index#0",
        "maybe_value%0#0",
        "index#0 (copy)"
      ]
    },
    "348": {
      "op": ">",
      "defined_out": [
        "index#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "index#0",
        "tmp%0#1"
      ]
    },
    "349": {
      "error": "Invalid index",
      "op": "assert // Invalid index",
      "stack_out": [
        "index#0"
      ]
    },
    "350": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "351": {
      "op": "bytec 4 // 0x62617463685f",
      "defined_out": [
        "0x62617463685f",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x62617463685f"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "0x62617463685f",
        "encoded_value%0#0"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "355": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "356": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "\"\""
      ]
    },
    "358": {
      "op": "cover 2",
      "stack_out": [
        "\"\"",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "360": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "361": {
      "op": "dup",
      "defined_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ]
    },
    "362": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "363": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "364": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "367": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ]
    },
    "368": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "369": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "377": {
      "op": "log",
      "stack_out": []
    },
    "378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    }
  }
}